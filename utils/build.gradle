apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'utils'
    bintrayOrg = 'decop'
    versionName = "0.1"

    publishedGroupId = 'com.feragusper.makigero'
    libraryName = 'utils'
    artifact = 'utils'

    libraryDescription = 'An Android Library that provides a collection of utils for different purposes'

    siteUrl = 'https://github.com/desarrollo-cooperativo/android-common-utils'
    gitUrl = 'https://github.com/desarrollo-cooperativo/android-common-utils.git'

    libraryVersion = '0.1'

    developerId = 'feragusper'
    developerName = 'Fernando Perez'
    developerEmail = 'fernancho@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName "0.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            //noinspection GroovyAssignabilityCheck
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                //noinspection GroovyAssignabilityCheck
                name libraryName
                //noinspection GroovyAssignabilityCheck
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        //noinspection GroovyAssignabilityCheck
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        //noinspection GroovyAssignabilityCheck
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray

bintray {

    //noinspection GrReassignedInClosureLocalVar
    if (System.getenv('BINTRAY_USER')) {
        user = System.getenv('BINTRAY_USER')
    }

    //noinspection GrReassignedInClosureLocalVar
    if (System.getenv('BINTRAY_KEY')) {
        key = System.getenv('BINTRAY_KEY')
    }

    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
    }

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        //noinspection GroovyAssignabilityCheck
        version {
            desc = libraryDescription
            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getproperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}